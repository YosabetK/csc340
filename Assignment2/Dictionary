
#include <iostream>
#include <vector>
#include <string>
#include <fstream>
#include <map>
#include <algorithm>


using namespace std;

vector<string> seperate(string line, string str);
//map<string, vector<vector<string>> addMap();
//map<string, map<string, vector<string>>> addMap

map<string, vector<string>> kevinMap;
//bool checkIfMapContains(vector<string> tempVectorToCheck);
//bool checkIfMapContains(vector<string> tempVectorToCheck);

bool checkIfMapContains(string vec1, string vec2, int vecSize);

map<string, vector<string>> addMap(vector<string> temp);
string tempConvertToLowerCase(string tempString);


string tempPartOfSpeechArray[] = {"noun", "pronoun", "adjective", "verb", "adverb", "preposition", "conjunction", "interjection"};

class TempDataBaseDictionaryClass {
    
private:    
    string tempKeyword, tempPartOfSpeech, tempDefinition;
    
    //map<string, vector<string>> tempStorageMap;

public:    
    tempDataBaseDictionaryClass() {
        //Empty Constructor
    }
    void setKeyWord(string keyword) {
        tempKeyword = keyword;
    }
    string getTempKeyword() {
        return tempKeyword;
    }
    string getTempPartOfSpeech() {
        return tempPartOfSpeech;
    }
    string getTempDefinition() {
        return tempDefinition;
    }
    string toStringFormat() {
        cout << "\t" << tempKeyword << " [" << tempPartOfSpeech << "] : " << tempDefinition << endl;
    }
    
};

int main() {
    vector<string> temp;
    vector<vector<string>> tempVector;
    
    string line, line2, next;
    fstream inFile;
    cout << "! Opening data file... ./Data.CS.SFSU.txt" << endl;
    if(!inFile) {
        cout << "Cannot open the file: " << endl;
    }
    cout << "! Loading data..." << endl;
    inFile.open("C:\\Users\\adazh\\OneDrive\\Desktop\\Data.CS.SFSU.txt", ios::in);
    
    while(getline(inFile, line)) {
        
        //cout << line << endl;
        //getline(inFile, line2, '-=>>');
        
       //cout << line << endl;
       
       temp = seperate(line, "|");
       
       addMap(temp);
    }

    //vector<string>::iterator itr;
    //vector<vector<string>>::iterator itr2; 
    /*
    for(itr2 = tempVector.begin(); itr2 != tempVector.end(); ++itr2) {
        
        for(itr = (*itr2).begin(); itr != (*itr2).end(); ++itr) {
            
            cout << *itr << endl;
            
            
            if((*itr).find(" -=>> ") != string::npos) {
                //cout << (*itr) << endl;
            }
            
        }
    }
    */
    inFile.close();
    cout << "! Closing data file... ./Data.CS.SFSU.txt" << endl;
    
    //TempDataBaseDictionaryClass temp;
    //getTempKeyword();
    
    //Here is checking the user input
    
    bool tempSearchState = true;
    
    while(tempSearchState) {
        
        string tempUserInputLine;
        cout << "Search: ";
        getline(cin, tempUserInputLine);
        
        if(tempUserInputLine == tempConvertToLowerCase("!q")) {
            
            tempSearchState = false; 
            cout << endl << "-----THANK YOU-----" << endl;
            exit(0);
        }
        
        //cout << "\t|" << endl;
        
        vector<string> tempSearchDictionary;
        tempSearchDictionary = seperate(tempUserInputLine, " ");
        
        cout << "\t|" << endl;
        
        //cout << tempSearchDictionary[0] << endl
        
        if(tempSearchDictionary.size() == 1) {
            
            string tempEmpty;
            
            if(checkIfMapContains(tempSearchDictionary[0], tempEmpty, tempSearchDictionary.size())) {
                cout <<"\t True" << endl;
            }
            else {
                cout << "\t <Not found>" << endl;
            }
        }
        if(tempSearchDictionary.size() == 2) {
            
            if(checkIfMapContains(tempSearchDictionary[0], tempSearchDictionary[1], tempSearchDictionary.size())) {
                
                cout <<"\t True" << endl;
            }
            else {
                
                cout << "\t <Not found>" << endl;
            }
        }
        
        if(tempSearchDictionary.size() > 2) {
            
            if(true) {
                
            }
            else {
                
            }
        }
        
        cout << "\t|" << endl;
        
        /*Testing to see if it handles the input
        for(vector<string>::iterator itrx = tempSearchDictionary.begin(); itrx != tempSearchDictionary.end(); ++itrx) {
            cout << *itrx << endl;
        }
        */ 
    }
    
    return 0;
}


//Method to search for the keyword user inputs
//logic:
//if vector inside map<string, vector<string>>
//contains tempPartOfSpeech, then print the key and the value that contains that tempPartOfSpeech
//
//Now seperate the vector value that matches the key,
//seperate by -=>> also called splitting
//first one is the part of speech, second one will be definition
//
//splitted[0] is the partofspeech, splitted[1] is the definition
//Make sure to have another new vector that holds splitted[0] and splitted[1]
//
//void checkIfContainsKey
//void checkIfContainsSearchStuff

//Check if the map contains the user input, especially keyword and part of speech

bool checkIfMapContains(string tempVector1, string tempVector2, int vectorSize) {
    
    bool tempContains;
    
    for(map<string, vector<string>>::iterator it = kevinMap.begin(); it != kevinMap.end(); ++it) {
        
        if((vectorSize == 1) && kevinMap.find(tempVector1) != kevinMap.end() ) {
                   
            return true;
        }
        else {
            
            tempContains = false;
        }
            
        for(vector<string>::iterator vec = it->second.begin(); vec != it->second.end(); ++vec) {
               
            if((vectorSize == 2) && ((*vec).find(tempVector2) != string::npos) ) {
                return true;
            }
            else {
                
                tempContains = false;
            }
               
        }

    } 
     return tempContains;   
}



map<string, vector<string>> addMap(vector<string> kevin) {
    //map<string, vector<string>> kevinMap;
    
    vector<string> temp;
    vector<string>::iterator itr;
    
    string tempKey;
    string tempValue;
    
    for(itr = kevin.begin(); itr != kevin.end(); ++itr) {
        
        //currently looping through the vector
        
        //If Contains -=>> count this as a value, put inside vector of strings
        if((*itr).find(" -=>> ") != string::npos) {

            
            tempValue = (*itr);
            
            //kevinMap[tempKey];
            //My example how to insert, this is testing it to see if it works
            //kevinMap.insert({tempKey, {"I want to be developer ", " The weather is hot! "}});
            
            //Finding the correct key to add the vector of strings to
            if(kevinMap.find(tempKey) == kevinMap.end()) {

                kevinMap[tempKey].push_back(tempValue);
                //kevinMap[tempKey].push_back(tempValue);
            }
            else {
                kevinMap[tempKey].push_back(tempValue);
            }
            
            //Insert both they key and value together in the map
            kevinMap.insert({tempKey, {temp}});
        }
        //If Doesn't contain -=>> set the key as the given value from for loop
        else {
 
            tempKey = (*itr);
        }
        
        
        
        /*
        if((*itr).find("-=>>") != string::npos) {
            
            if(kevinMap.find(tempKey) == kevinMap.end()) {
            
                kevinMap[tempKey] = temp;
                temp.push_back((*itr));
            }       
        }*/
    }    
        /*
        for(map<string, vector<string>>::iterator it = kevinMap.begin(); it != kevinMap.end(); ++it) {
            
            //cout << it->first << " ";
            
            for(vector<string>::iterator vec = it->second.begin(); vec != it->second.end(); ++vec) {
                
                //cout << *vec;
            }
            
            //cout << endl;
        } 
        */
    
    return kevinMap;
}

//map<string, vector<vector<string>> addMap() {
    
    
    
    /*
    vector<string>::iterator itr;
    vector<vector<string>>::iterator itr2;
    
    for(itr2 = tempVector.begin(); itr2 != tempVector.end(); ++itr2) {
        
        for(itr = (*itr2).begin(); itr != (*itr2).end(); ++itr) {
            
            //cout << *itr << endl;
            
            if((*itr).find(" -=>> ") != string::npos) {
                cout << (*itr) << endl;
            }
        }
    }
    */
//}

vector<string> seperate(string tempLineToSplit, string tempStringSplitter) {
    
    vector<string> tempSplittedVector;
    size_t tempCurrentPosition = 0;
    string line;
    
    while((tempCurrentPosition = tempLineToSplit.find(tempStringSplitter)) != string::npos) {
        
        line = tempLineToSplit.substr(0, tempCurrentPosition);
        //Same as adding string to a vector
        tempSplittedVector.push_back(line);
        tempLineToSplit.erase(0, tempCurrentPosition + tempStringSplitter.length());
    }
    tempSplittedVector.push_back(tempLineToSplit);
    
    /*
    for(int i = 0; i < tempSplittedVector.size(); i++) {
        
        cout  << tempSplittedVector[i] << endl;
    }
    */
    
    
    return tempSplittedVector;
    
     
}

string tempConvertToLowerCase(string tempString) {
    
    transform(tempString.begin(), tempString.end(), tempString.begin(), ::tolower);
    
    return tempString;
}





