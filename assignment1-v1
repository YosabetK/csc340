
import java.util.*;

public enum JavaDataBaseDictionary {

    //Contains all the enum in the database

    TEMP_ARROW_NOUN_SLOT1("arrow", "noun", "Here is one arrow: <IMG> -=>> </IMG>"),

    TEMP_DISTINCT_ADJECTIVE_SLOT1("distinct", "adjective", "Familiar. Worked with Java."),
    TEMP_DISTINCT_ADJECTIVE_SLOT2("distinct", "adjective", "Unique. No duplicates. Clearly different or of a different kind."),

    TEMP_DISTINCT_ADVERB_SLOT1("distinct", "adverb", "Uniquely. Written \"distinctly\"."),

    TEMP_DISTINCT_NOUN_SLOT1("distinct", "noun", "A Keyword in this assignment"),
    TEMP_DISTINCT_NOUN_SLOT2("distinct", "noun", "A Keyword in this assignment"),
    TEMP_DISTINCT_NOUN_SLOT3("distinct", "noun", "A Keyword in this assignment"),
    TEMP_DISTINCT_NOUN_SLOT4("distinct", "noun", "An advanced search option"),
    TEMP_DISTINCT_NOUN_SLOT5("distinct", "noun", "Distinct is a parameter in this assignment"),

    TEMP_PLACEHOLDER_ADJECTIVE_SLOT1("placeholder", "adjective", "To be updated. . ."),
    TEMP_PLACEHOLDER_ADJECTIVE_SLOT2("placeholder", "adjective", "To be updated. . ."),

    TEMP_PLACEHOLDER_ADVERB_SLOT1("placeholder", "adverb", "To be updated. . ."),

    TEMP_PLACEHOLDER_CONJUNCTION_SLOT1("placeholder", "conjunction", "To be updated. . ."),

    TEMP_PLACEHOLDER_INTERJECTION_SLOT1("placeholder", "interjection", "To be updated. . ."),

    TEMP_PLACEHOLDER_NOUN_SLOT1("placeholder", "noun", "To be updated. . ."),
    TEMP_PLACEHOLDER_NOUN_SLOT2("placeholder", "noun", "To be updated. . ."),
    TEMP_PLACEHOLDER_NOUN_SLOT3("placeholder", "noun", "To be updated. . ."),

    TEMP_PLACEHOLDER_PREPOSITION_SLOT1("placeholder", "preposition", "To be updated. . ."),

    TEMP_PLACEHOLDER_PRONOUN_SLOT1("placeholder", "pronoun", "To be updated. . ."),

    TEMP_PLACEHOLDER_VERB_SLOT1("placeholder", "verb", "To be updated. . ."),

    TEMP_CSC220_ADJECTIVE_SLOT1("csc220", "adjective", "Ready to create complex data structures."),

    TEMP_CSC220_VERB_SLOT1("csc220", "verb", "To create data structures."),

    TEMP_CSC340_ADJECTIVE_SLOT1("CSC340", "adjective", "= C++ version of CSC210 + CSC220 + more."),

    TEMP_CSC340_NOUN_SLOT1("csc340", "noun", "A CS upper division course."),
    TEMP_CSC340_NOUN_SLOT2("csc340", "noun", "Many hours outside of class."),
    TEMP_CSC340_NOUN_SLOT3("csc340", "noun", "Programming Methodology."),

    TEMP_BOOK_NOUN_SLOT1("book", "noun", "A set of pages."),
    TEMP_BOOK_NOUN_SLOT2("book", "noun", "A written work published in printed or electronic form."),

    TEMP_BOOK_VERB_SLOT1("book", "verb", "To arrange for someone to have a seat on a plane."),
    TEMP_BOOK_VERB_SLOT2("book", "verb", "To arrange something on a particular date."),

    TEMP_ADVERB_NOUN_SLOT1("adverb", "noun", "Adverb is a word that adds more information about place, time, manner, cause or degree to a verb, an adjective, a phrase or another adverb."),

    TEMP_ADJECTIVE_NOUN_SLOT1("adjective", "noun", "Adjective is a word that describes a person or thing, for example big, red and clever in a big house, red wine and a clever idea."),

    TEMP_INTERJECTION_NOUN_SLOT1("interjection", "noun", "Interjection is a short sound, word or phrase spoken suddenly to express an emotion. Oh!, Look out! and Ow! are interjections."),

    TEMP_NOUN_NOUN_SLOT1("noun", "noun", "Noun is a word that refers to a person, (such as Ann or doctor), a place (such as Paris or city) or a thing, a quality or an activity (such as plant, sorrow or tennis.");

    //The Variables inside the enum

    private String tempKeyword;
    private String tempPartOfSpeech;
    private String tempDefinition;

    //The Constructor that takes in 3 strings


    private JavaDataBaseDictionary(String tempKeyWord, String tempPartOfSpeech, String tempDefinition) {

        this.tempKeyword = tempKeyWord;
        this.tempPartOfSpeech = tempPartOfSpeech;
        this.tempDefinition = tempDefinition;
    }

    //Getters and setters

    public String getTempKeyword() {

        return tempKeyword;
    }

    public String getTempPartOfSpeech() {

        return tempPartOfSpeech;
    }

    public String getTempDefinition() {

        return tempDefinition;
    }

    /*
    public void setTempKeyword() {

    }

    public void setTempPartOfSpeech() {

    }
    */

    public void setTempDefinition(String tempDefinition) {

        this.tempDefinition = tempDefinition;
    }

    public String toString() {

        return this.tempKeyword + " [" + this.tempPartOfSpeech + "] " + ": " + this.tempDefinition;
    }

    public static void main(String[] args) {

        System.out.println("! Loading data. . .");

        Dictionary tempKevinJavaHashDictionary = new Hashtable();

        ArrayList<JavaDataBaseDictionary> kevin = new ArrayList<>();

        ArrayList<String> tempStorage = new ArrayList<>();

        for(JavaDataBaseDictionary tempValue: JavaDataBaseDictionary.values()) {

            tempKevinJavaHashDictionary.put(tempKevinJavaHashDictionary.keys(), tempValue);
        }

        System.out.println(tempKevinJavaHashDictionary.size());


        for(Enumeration e = tempKevinJavaHashDictionary.elements(); e.hasMoreElements();) {

            //System.out.println(e.nextElement());
            tempStorage.add(e.nextElement().toString());
        }

        //System.out.println(tempStorage);


        /*
        for(String test: tempStorage) {

            if(test.contains("noun".toLowerCase()) && test.contains("noun".toLowerCase())) {
                System.out.println(test);
            }

            //test.indexOf("  ");
        }
        */


        System.out.println("! Loading completed. . .");

        System.out.println();
        System.out.println("-----DICTIONARY 340 JAVA-----");
        System.out.println();

        boolean tempStateQuit = false;

        String[] tempPartOfSpeech = {"adjective", "adverb", "noun", "conjunction", "interjection", "preposition", "pronoun", "verb"};

        Scanner tempUserInput = new Scanner(System.in);

        //System.out.println(((Hashtable) tempKevinJavaHashDictionary).values());

        /*
        for(Enumeration e = tempKevinJavaHashDictionary.elements(); e.hasMoreElements();) {

            System.out.println(e.nextElement());

        }
        */




        while(!tempStateQuit) {

            System.out.print("Search: ");

            String tempResult = tempUserInput.nextLine().toLowerCase();

            String[] tempSplitKeySearch = tempResult.toString().split(" ");

            if(tempResult.equalsIgnoreCase("quit")) {
                tempStateQuit = true;
            }

            if(tempStateQuit) {

                System.out.println("\n-----THANK YOU-----");

                System.exit(0);
            }

            System.out.println("\t" + "|");

            if(tempSplitKeySearch.length == 1) {

                //System.out.println(tempSplitKeySearch[0]);

                for(JavaDataBaseDictionary e: JavaDataBaseDictionary.values()) {

                    if(e.tempKeyword.equalsIgnoreCase(tempSplitKeySearch[0])) {
                        System.out.println("\t " + e.toString());
                    }
                }

                for(JavaDataBaseDictionary e: JavaDataBaseDictionary.values()) {

                    if(!e.tempKeyword.contains(tempSplitKeySearch[0])) {
                        displayTempNotFoundMessage();
                        break;
                    }
                }

            }

            if(tempSplitKeySearch.length == 2) {

                //System.out.println(tempSplitKeySearch[1]);
                for(JavaDataBaseDictionary e: JavaDataBaseDictionary.values()) {

                    if(e.tempKeyword.equalsIgnoreCase(tempSplitKeySearch[0]) && e.tempPartOfSpeech.equalsIgnoreCase(tempSplitKeySearch[1])) {
                        System.out.println("\t " + e.toString());
                    }
                }

            }

            if(tempSplitKeySearch.length > 2) {

                //System.out.println(tempSplitKeySearch[2]);


            }


            System.out.println("\t" + "|");



            /*
            if(!tempStorage.contains(tempResult)) {
                displayTempNotFoundMessage();

            }
            */


            /*
                for (String temp : tempStorage) {

                    for(JavaDataBaseDictionary e: JavaDataBaseDictionary.values()) {

                        //temp.contains(tempResult.toString()) && tempResult.equalsIgnoreCase(e.tempKeyword)
                        //temp.contains(tempPartOfSpeech[0]) && tempSplitKeySearch.length > 1

                        if (e.tempKeyword.contains(tempResult) && temp.contains(tempResult)) {

                            //System.out.println("\t " + temp);
                            //System.out.println(temp);

                            break;

                        }

                    }



                }
                */

            /*
            for(JavaDataBaseDictionary e: JavaDataBaseDictionary.values()) {

                if(!e.tempKeyword.equalsIgnoreCase(tempResult)) {
                    System.out.println("No");
                    break;
                }

                if(e.tempKeyword.equalsIgnoreCase(tempResult)) {
                    System.out.println(e.toString());
                }
            }
            */





        }









        /*
        ArrayList<String> ex = new ArrayList<>();

        for(JavaDataBaseDictionary e: JavaDataBaseDictionary.values()) {

            if(e.tempKeyword.contains(TEMP_DISTINCT_NOUN_SLOT3.tempKeyword) && e.tempPartOfSpeech.contains(TEMP_DISTINCT_NOUN_SLOT3.tempPartOfSpeech)) {

                //System.out.println(e.tempKeyword + " " + e.tempPartOfSpeech + " " + e.tempDefinition);
                //System.out.println(e.toString());
                ex.add(e.toString());
            }
        }

        System.out.println(ex);

        for(String s: ex) {
            System.out.println(s);
        }
        */



    }



    public static void displayTempNotFoundMessage() {

        System.out.println("\t" + " <Not found>");

    }

    public static void displayTempInvalidSecondArgument() {

        System.out.println("\t" + "|");
        System.out.println("\t" + " <2nd argument must be a part of speech or \"distinct\">");
        System.out.println("\t" + "|");
    }
}





























