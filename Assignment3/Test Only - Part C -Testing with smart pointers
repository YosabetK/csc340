//This removeSecondNode340() 100% Compiles
//Using smart pointers part is 100% made by me, not googled or copied, took me sometime to figure out how it works. 
//Still not 100% understood yet.

(This won't be the code i will submit, only for practice and testing)

Forget the code below this code down here, this is a real way to do it, make sure headPtr is used as headPtr = headPtr->getNext() 

unique_ptr<Node<ItemType>> LinkedBag<ItemType>::specialTest(unique_ptr<Node<ItemType>>& tempSmartPointerNode) {

unique_ptr<LinkedBag<ItemType>> tempBag = make_unique <LinkedBag<ItemType>>();
    
    vector<string> items { headPtr->getItem(), headPtr->getItem(), headPtr->getItem(), headPtr->getItem() };
	cout << " !add()...     ";
	vector<string>::const_iterator cItr;
	for (cItr = items.begin(); cItr  != items.end(); cItr++) {
		cout << *cItr << " ";
		tempBag->add(*cItr);
	}
}	



//Forget below



template<typename ItemType>
bool LinkedBag<ItemType>::removeSecondNode340() 
{
	   Node<ItemType>* nodeToDeletePtr = headPtr->getNext();

     //shared_ptr<Node<ItemType>> head;

    shared_ptr<Node<ItemType>> head = make_shared<Node<ItemType>>(); 

     head->getItem() = nodeToDeletePtr->getItem();

     head->setItem(nodeToDeletePtr->getItem());

     cout << "HI" << head->getItem() << endl;


   	 return remove(head->getItem());		// remove the second item
} 


//Unique Pointer for removeSecondNode340 still works

template<typename ItemType>
bool LinkedBag<ItemType>::removeSecondNode340() 
{
	   Node<ItemType>* nodeToDeletePtr = headPtr->getNext();

     //shared_ptr<Node<ItemType>> head;

    unique_ptr<Node<ItemType>> head = make_unique<Node<ItemType>>(); 

     head->getItem() = nodeToDeletePtr->getItem();

     head->setItem(nodeToDeletePtr->getItem());

     cout << "HI" << head->getItem() << endl;


   	 return remove(head->getItem());		// remove the second item
}









//Unfinished

//  addEnd340()
template<typename ItemType>
bool LinkedBag<ItemType>::addEnd340(const ItemType& newEntry) 
{
	   Node<ItemType> *curPtr = headPtr;		// start from the head

     unique_ptr<Node<ItemType>> head = make_unique<Node<ItemType>>(); 

     head->getItem() = curPtr->getItem();

     head->setItem(curPtr->getItem());

     head->setNext(curPtr->getNext());
	
	     while (curPtr->getNext() != nullptr) 
       {	                                   
		      curPtr = curPtr->getNext();      //use while loop to find the last node
	     }
       
    head = head->getNext();   
	   
 	 Node<ItemType> *newNodePtr = new Node<ItemType>();       //create a new node
	 newNodePtr->setItem(newEntry);
	 curPtr->setNext(newNodePtr);
   head->setItem(newNodePtr->getItem());
   //curPtr->setNext(head->getItem());
  
   cout << head->getItem() << endl;

	 itemCount++;
	 return true;
} 























