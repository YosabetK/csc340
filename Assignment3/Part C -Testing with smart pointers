//This removeSecondNode340() 100% Compiles
//Using smart pointers part is 100% made by me, not googled or copied, took me sometime to figure out how it works. 
//Still not 100% understood yet.

template<typename ItemType>
bool LinkedBag<ItemType>::removeSecondNode340() 
{
	   Node<ItemType>* nodeToDeletePtr = headPtr->getNext();

     //shared_ptr<Node<ItemType>> head;

    shared_ptr<Node<ItemType>> head = make_shared<Node<ItemType>>(); 

     head->getItem() = nodeToDeletePtr->getItem();

     head->setItem(nodeToDeletePtr->getItem());

     cout << "HI" << head->getItem() << endl;


   	 return remove(head->getItem());		// remove the second item
} 


//Unique Pointer for removeSecondNode340 still works

template<typename ItemType>
bool LinkedBag<ItemType>::removeSecondNode340() 
{
	   Node<ItemType>* nodeToDeletePtr = headPtr->getNext();

     //shared_ptr<Node<ItemType>> head;

    unique_ptr<Node<ItemType>> head = make_unique<Node<ItemType>>(); 

     head->getItem() = nodeToDeletePtr->getItem();

     head->setItem(nodeToDeletePtr->getItem());

     cout << "HI" << head->getItem() << endl;


   	 return remove(head->getItem());		// remove the second item
}





























